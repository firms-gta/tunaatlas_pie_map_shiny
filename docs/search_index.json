[["index.html", "Documentation on the Dockerfile and the YAML for the Shiny App", " Documentation on the Dockerfile and the YAML for the Shiny App Welcome to the documentation for the Dockerfile and YAML used in the Shiny App project. This book covers the following: Dockerfile Documentation: Details on the Docker configuration and usage. GitHub Actions YAML: An explanation of the CI/CD workflow YAML file. Running GitHub Actions Locally: Steps for executing GitHub Actions locally for testing. (incoming) Use the table of contents on the left to navigate the sections. "],["dockerfile-documentation.html", "Chapter 1 Dockerfile Documentation 1.1 Introduction 1.2 Final Steps", " Chapter 1 Dockerfile Documentation 1.1 Introduction This document provides a detailed explanation of the Dockerfile used to set up and deploy a Shiny application. The Dockerfile includes steps for configuring the environment, managing dependencies, and running the Shiny app. FROM rocker/r-ver:4.2.3 Base Image: Uses the rocker/r-ver base image with R version 4.2.3 as the foundation for the container. LABEL maintainer=&quot;Julien Barde &lt;julien.barde@ird.fr&gt;&quot; Maintainer Information: Adds metadata about the person maintaining this Dockerfile. RUN apt-get update &amp;&amp; apt-get install -y \\ sudo \\ pandoc \\ pandoc-citeproc \\ libssl-dev \\ libcurl4-gnutls-dev \\ libxml2-dev \\ libudunits2-dev \\ libproj-dev \\ libgeos-dev \\ libgdal-dev \\ libv8-dev \\ libsodium-dev \\ libsecret-1-dev \\ git \\ libnetcdf-dev \\ curl \\ libjq-dev \\ cmake \\ protobuf-compiler \\ libprotobuf-dev \\ librdf0 \\ librdf0-dev \\ redland-utils &amp;&amp; \\ apt-get clean System Dependencies: Installs system libraries required for building and running the Shiny app. Includes dependencies like pandoc for document conversion, libssl-dev for SSL/TLS, and others for geospatial and network operations. RUN install2.r --error --skipinstalled --ncpus -1 httpuv Installs the httpuv R package, which is a core dependency for Shiny apps. WORKDIR /root/tunaatlas_pie_map_shiny Set Working Directory: Specifies the working directory inside the container. COPY download_GTA_data.R ./download_GTA_data.R RUN Rscript download_GTA_data.R Data Preparation: Copies a script into the container to download necessary datasets, from .zip or .csv files on github. Executes the script using Rscript. RUN R -e &quot;install.packages(&#39;remotes&#39;, repos=&#39;https://cran.r-project.org/&#39;)&quot; RUN R -e &quot;remotes::install_version(&#39;downloader&#39;, version = &#39;0.4&#39;, upgrade = &#39;never&#39;, repos = &#39;https://cran.r-project.org/&#39;)&quot; RUN R -e &quot;remotes::install_version(&#39;readr&#39;, version = &#39;2.1.5&#39;, upgrade = &#39;never&#39;, repos = &#39;https://cran.r-project.org/&#39;)&quot; Downloading packages for downloading big data: Download packages to download data from DOI (around 300 MB). This can be done using other packages, it can also be integrated to a script. ## Echo the DOI_CSV_HASH for debugging and to to stop cache if DOI.csv has changed (takes in input the hash of the DOI.csv file created in yml) ARG DOI_CSV_HASH RUN echo &quot;DOI_CSV_HASH=${DOI_CSV_HASH}&quot; ## Create data repository to copy DOI.csv, a file listing the dataset to download from zenodo RUN mkdir -p data ## Copy the CSV containing the data to download ## Copy the script downloading the data from the CSV COPY data/DOI.csv ./data/DOI.csv COPY update_data.R ./update_data.R RUN Rscript update_data.R This download data from zenodo taking in input a .csv file providing every DOI of the dataset to be downloaded. As this operation takes time and bandwidth, we use a cache. For this we check the DOI.csv file and if it didn’t change this operation is not reran. ## ARG defines a constructor argument called RENV_PATHS_ROOT. Its value is passed from the YAML file. An initial value is set up in case the YAML does not provide one ARG RENV_PATHS_ROOT=/root/.cache/R/renv ENV RENV_PATHS_ROOT=${RENV_PATHS_ROOT} ## Set environment variables for renv cache ENV RENV_PATHS_CACHE=${RENV_PATHS_ROOT} ## Echo the RENV_PATHS_ROOT for logging RUN echo &quot;RENV_PATHS_ROOT=${RENV_PATHS_ROOT}&quot; RUN echo &quot;RENV_PATHS_CACHE=${RENV_PATHS_CACHE}&quot; ## Define the build argument for the hash of renv.lock to stop cache if renv.lock has changed ARG RENV_LOCK_HASH RUN echo &quot;RENV_LOCK_HASH=${RENV_LOCK_HASH}&quot; ## Create the renv cache directory RUN mkdir -p ${RENV_PATHS_ROOT} ## Install renv package that records the packages used in the shiny app RUN R -e &quot;install.packages(&#39;renv&#39;, repos=&#39;https://cran.r-project.org/&#39;)&quot; ## Copy renv configuration and lockfile COPY renv.lock ./ COPY renv/activate.R renv/ COPY renv/settings.json renv/ ## Restore renv packages RUN R -e &quot;renv::activate()&quot; ## Used to setup the environment (with the path cache) RUN R -e &quot;renv::restore()&quot; ## Copy the rest of the application code COPY . . Similarly, if renv.lock as not changed, all the downloading of the packages will not be done again as the cache image already contains them. We then activate the project to use renv and thus to load the corresonding packages. This action can be put at the all beginning of the dockerfile if the packages are the input that are the less likely to change. NB: Any change in the Dockerfile will remove the use of the cache for the next creation. The ARG RENV_LOCK_HASH corresponds in the yml to $(sha256sum renv.lock | cut -d’ ’ -f1). ## Create the default dataset from DOI and GTA data loading to make launching faster (use of qs for loading and data.table for tidying) RUN Rscript ./create_or_load_default_dataset.R Those lines are specific to this shiny app but allows the loading of the dataset and the tidying to do it before launching the app and thus reduce the laucning time. ## Expose port 3838 for the Shiny app EXPOSE 3838 ## Create directories for configuration RUN mkdir -p /etc/tunaatlas_pie_map_shiny/ RUN R -e &quot;library(sf); library(tmap); library(dplyr); library(ggplot2); library(leaflet); library(data.table)&quot; Exposure and directories are mandatory for the launching. RUN R -e &quot;library(sf); library(tmap); library(dplyr); library(ggplot2); library(leaflet); library(data.table)&quot; Those lines are to load big packages prior of the launching to avoid time consuming however it is not clear yet if it works well. Some good practice can help reducing the time of the launching of the application, they will be detailled in another documentation file. 1.2 Final Steps At the end of the Dockerfile: - The CMD statement ensures the Shiny app starts when the container runs: CMD [&quot;R&quot;, &quot;-e&quot;, &quot;shiny::runApp(&#39;/root/tunaatlas_pie_map_shiny&#39;, port=3838, host=&#39;0.0.0.0&#39;)&quot;] The port 3838 is exposed to allow access to the app. "],["github-actions-yaml-documentation.html", "Chapter 2 GitHub Actions YAML Documentation 2.1 Introduction 2.2 Set up Docker Buildx 2.3 Verify Docker images 2.4 Inspect Docker cache 2.5 Build Docker image 2.6 Load Docker image 2.7 Conditional push Docker image 2.8 Conclusion", " Chapter 2 GitHub Actions YAML Documentation 2.1 Introduction This document provides a detailed line-by-line explanation of the GitHub Actions workflow for building and deploying a Docker image for a Shiny app. name: Build and Push Docker Image name: Specifies the name of the workflow as it appears in the GitHub Actions UI. on: push: branches: - &#39;main&#39; tags: - &quot;v*&quot; pull_request: branches: - &#39;main&#39; on: Defines the events that trigger the workflow. push: branches: Runs the workflow when code is pushed to the main branch. tags: Triggers the workflow for tags starting with v (e.g., v1.0.0). pull_request: branches: Runs the workflow for pull requests targeting the main branch. jobs: docker: runs-on: ubuntu-latest timeout-minutes: 140 jobs: Specifies the set of tasks to execute in the workflow. docker: The name of the job. runs-on: Uses the ubuntu-latest virtual environment to run the job. timeout-minutes: Limits the job’s runtime to 140 minutes to prevent hanging jobs. steps: - name: Checkout code uses: actions/checkout@v3 steps: Defines the sequence of actions within the job. name: Descriptive name for the step. uses: Utilizes the actions/checkout@v3 action to clone the repository code into the runner. - name: Calculate renv.lock hash id: renv_lock run: echo &quot;renv_lock_hash=$(sha256sum renv.lock | cut -d&#39; &#39; -f1)&quot; &gt;&gt; $GITHUB_ENV name: Calculates a hash for the renv.lock file to check for changes. id: Assigns an identifier (renv_lock) to reference this step later. run: Executes a shell command to calculate the SHA256 hash of renv.lock and saves it as an environment variable ($GITHUB_ENV). - name: Calculate DOI.csv hash id: doi_csv run: echo &quot;doi_csv_hash=$(sha256sum data/DOI.csv | cut -d&#39; &#39; -f1)&quot; &gt;&gt; $GITHUB_ENV Similar to the renv.lock step but calculates the hash for data/DOI.csv. - name: Docker meta id: meta uses: docker/metadata-action@v4 with: images: ghcr.io/firms-gta/tunaatlas_pie_map_shiny_CWP_database flavor: latest=true tags: | type=ref,event=branch type=ref,event=pr type=semver,pattern={{version}} labels: | org.opencontainers.image.url=${{ github.repository }} org.opencontainers.image.source=${{ github.repository }} org.opencontainers.image.title=GlobalTunaAtlasExplorer org.opencontainers.image.description=Interactive Shiny application for Tuna Atlas data visualization org.opencontainers.image.vendor=IRD org.opencontainers.image.author=Bastien Grasset &lt;bastien.grasset@ird.fr&gt; name: Creates metadata for the Docker image. id: Assigns the identifier meta. uses: Runs the docker/metadata-action@v4 action to generate Docker image metadata. with: Configuration inputs for the action: images: Specifies the image repository. flavor: Marks the latest build as true. tags: Defines tagging strategies for the image. labels: Adds metadata labels to the Docker image. - name: Login to image repository uses: docker/login-action@v2 with: registry: ghcr.io username: ${{ github.actor }} password: ${{ secrets.GHCR_TOKEN }} name: Logs into the GitHub Container Registry (GHCR). uses: Utilizes the docker/login-action@v2 to authenticate with GHCR. with: Specifies login details: registry: Target registry (ghcr.io). username: Uses the GitHub actor (user or bot triggering the workflow). password: Uses the GHCR_TOKEN secret for authentication. 2.2 Set up Docker Buildx - name: Set up Docker Buildx uses: docker/setup-buildx-action@v2 with: driver-opts: image=moby/buildkit:master,network=host name: Sets up Docker Buildx, a tool for building multi-platform Docker images. uses: Utilizes the docker/setup-buildx-action@v2 action to configure Buildx. with: driver-opts: Configures Buildx with a custom driver. The image=moby/buildkit:master specifies the Buildkit image, and network=host sets the network mode. 2.3 Verify Docker images - name: Verify Docker images run: docker images name: Verifies the available Docker images on the runner. run: Executes the docker images command to list all locally available Docker images. 2.4 Inspect Docker cache - name: Inspect Docker cache run: docker buildx du name: Inspects the Docker Buildx cache usage. run: Runs the docker buildx du command to display detailed information about the cache, including its size and usage. 2.5 Build Docker image - name: Build Docker image if: ${{ !contains(env.COMMIT_MESSAGE, &#39;No building docker image&#39;) }} run: | BRANCH_NAME=$(echo ${{ github.ref_name }} | tr &#39;/&#39; &#39;_&#39; | tr &#39;:&#39; &#39;_&#39;) if [[ &quot;${{ github.event.inputs.action }}&quot; == &quot;build-no-cache-and-push&quot; ]]; then echo &quot;Building without cache...&quot; docker buildx build --no-cache \\ --progress=plain \\ --build-arg RENV_PATHS_ROOT=${{ env.RENV_PATHS_ROOT }} \\ --build-arg RENV_LOCK_HASH=${{ env.renv_lock_hash }} \\ --build-arg DOI_CSV_HASH=${{ env.doi_csv_hash }} \\ --tag ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${BRANCH_NAME} \\ --output type=docker,dest=/tmp/docker-image.tar \\ . else echo &quot;Building with cache...&quot; docker buildx build \\ --progress=plain \\ --cache-from type=registry,ref=$CACHE_IMAGE:${BRANCH_NAME} \\ --cache-to type=registry,ref=$CACHE_IMAGE:${BRANCH_NAME},mode=max \\ --build-arg RENV_PATHS_ROOT=${{ env.RENV_PATHS_ROOT }} \\ --build-arg RENV_LOCK_HASH=${{ env.renv_lock_hash }} \\ --build-arg DOI_CSV_HASH=${{ env.doi_csv_hash }} \\ --tag ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${BRANCH_NAME} \\ --output type=docker,dest=/tmp/docker-image.tar \\ . fi name: Builds the Docker image. if: Ensures the step is skipped if the commit message contains No building docker image. run: BRANCH_NAME: Converts the branch name into a sanitized format suitable for tagging. Conditional Build: build-no-cache-and-push: If the action input specifies this, the build runs without cache using --no-cache. Otherwise, builds with caching enabled using --cache-from and --cache-to options. --build-arg: Passes environment variables like RENV_PATHS_ROOT, RENV_LOCK_HASH, and DOI_CSV_HASH to the build process. 2.6 Load Docker image - name: Load Docker image if: ${{ github.event_name == &#39;workflow_dispatch&#39; &amp;&amp; contains(github.event.inputs.action, &#39;push&#39;) || github.event_name == &#39;push&#39; &amp;&amp; github.ref_type == &#39;tag&#39; }} run: | docker load -i /tmp/docker-image.tar name: Loads the Docker image tar file into the runner’s Docker environment. if: Ensures the step runs only for: workflow_dispatch events with the push action. push events triggered by tags. run: Uses docker load to import the built image. 2.7 Conditional push Docker image - name: Conditional push Docker image if: ${{ github.event_name == &#39;workflow_dispatch&#39; &amp;&amp; contains(github.event.inputs.action, &#39;push&#39;) || github.event_name == &#39;push&#39; &amp;&amp; github.ref_type == &#39;tag&#39; }} run: | TAG_NAME=$(basename ${GITHUB_REF}) BRANCH_NAME=$(echo ${{ github.ref_name }} | sed &#39;s/[^a-zA-Z0-9_.-]/_/g&#39;) docker tag ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${BRANCH_NAME} ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${TAG_NAME} docker push ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${BRANCH_NAME} docker push ghcr.io/firms-gta/tunaatlas_pie_map_shiny:${TAG_NAME} name: Conditionally pushes the Docker image to the registry. if: Ensures the step runs only for: workflow_dispatch events with the push action. push events triggered by tags. run: TAG_NAME: Extracts the tag name from the GitHub reference. BRANCH_NAME: Sanitizes the branch name for safe use as a tag. docker tag: Tags the built image with the branch name and tag name. docker push: Pushes both branch-specific and tag-specific images to the registry. 2.8 Conclusion This section of the YAML file automates the process of setting up Docker Buildx, building and managing Docker images, and pushing them to a registry, enabling a robust CI/CD pipeline for containerized applications. "],["for-now-to-build-the-shiny-app-in-local.html", "A For now, to build the shiny app in local A.1 To run the image A.2 To run the image passing arguments inside as a DB connection:", " A For now, to build the shiny app in local docker build -t tunaatlas_pie_map_shiny . A.1 To run the image docker run -e tunaatlas_pie_map_shiny A.2 To run the image passing arguments inside as a DB connection: docker run -e DB_HOST=mydbhost -e DB_PORT=5432 -e DB_NAME=mydatabase -e DB_USER_READONLY=myuser -e DB_PASSWORD=mypassword tunaatlas_pie_map_shiny "],["using-buildx-to-create-the-docker-image-in-local-and-push.html", "B Using buildx to create the docker image in local and push B.1 Step 1: Generate a Personal Access Token (PAT) B.2 Step 2: Login to GHCR Locally B.3 Step 3: Create a event.json File B.4 Step 4: Verify Docker Buildx Installation B.5 Step 6: Build with Remote Cache (Incoming) B.6 Step 7: Verify Cache Usage B.7 Step 8: Run Locally with act B.8 Additional Notes", " B Using buildx to create the docker image in local and push Before proceeding, ensure the following tools are installed and configured on your system: Docker: Install the latest version from Docker’s website. Docker Buildx: Ensure Buildx is enabled in Docker: docker buildx create --use GitHub Account: With permissions to generate a Personal Access Token (PAT). B.1 Step 1: Generate a Personal Access Token (PAT) Navigate to your GitHub account’s Personal Access Tokens page: Generate PAT. Click Generate new token. Set the following scopes: write:packages (to push to the cache). read:packages (to pull from the cache). Save the generated token securely (you will need it later). B.2 Step 2: Login to GHCR Locally Authenticate Docker with your PAT: echo &lt;YOUR_PERSONAL_ACCESS_TOKEN&gt; | docker login ghcr.io -u &lt;YOUR_GITHUB_USERNAME&gt; --password-stdin Replace &lt;YOUR_PERSONAL_ACCESS_TOKEN&gt; and &lt;YOUR_GITHUB_USERNAME&gt; with your GitHub token and username, respectively. B.3 Step 3: Create a event.json File Create a event.json file to store the necessary inputs for your local builds: { &quot;inputs&quot;: { &quot;base_branch&quot;: &quot;main&quot;, &quot;action&quot;: &quot;build-no-cache&quot; } } Create a secrets.env file with the connection to ghcr GITHUB_ACTOR= GHCR_TOKEN= Replace the placeholders with your actual credentials. B.4 Step 4: Verify Docker Buildx Installation Ensure Docker Buildx is set up and working: docker buildx version If not, enable Buildx: docker buildx create --use B.5 Step 6: Build with Remote Cache (Incoming) Use the following docker buildx build command to build your image with caching: docker buildx build --cache-from=type=registry,ref=ghcr.io/firms-gta/tunaatlas_pie_map_shiny-cache:latest \\ --cache-to=type=registry,ref=ghcr.io/firms-gta/tunaatlas_pie_map_shiny-cache:latest,mode=max \\ --progress=plain -t tunaatlas_pie_map_shiny . Replace firms-gta with your GitHub repository. Replace tunaatlas_pie_map_shiny with your desired cache name. B.5.1 Explanation --cache-from: Pulls cached layers from the remote registry. --cache-to: Updates the cache in the registry with newly built layers. -t: Tags the built image. B.6 Step 7: Verify Cache Usage Check if the cache was used during the build: docker buildx du This command will display the cache usage. B.7 Step 8: Run Locally with act To simulate your GitHub Actions workflow locally, use act with the -s flag for secrets: Install act: brew install act # macOS sudo apt install act # Ubuntu Run the workflow: act workflow_dispatch -s GITHUB_USERNAME=&lt;your_github_username&gt; -s GITHUB_TOKEN=&lt;your_personal_access_token&gt; Replace the placeholders with your actual credentials. B.8 Additional Notes If you encounter a 401 Unauthorized error, verify that: Your PAT has the correct permissions (write:packages, read:packages). Docker is logged in to GHCR (docker login ghcr.io). Use public caches for simplified access if authentication is not desired. By following these steps, you can efficiently build and test Docker images locally while leveraging remote caching for faster builds. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
